apiVersion: v1
data:
  alertmanager.yaml: |
    global:
      # The smarthost and SMTP sender used for mail notifications.
      smtp_smarthost: 'localhost:25'
      smtp_from: 'alertmanager@example.org'
      smtp_auth_username: 'alertmanager'
      smtp_auth_password: 'password'
      # The auth token for Hipchat.
      hipchat_auth_token: 'NVjhsFzQOxFexUgULAB6Mn6FFP7TcgnFAZUrHwrp'
      # Alternative host for Hipchat.
      hipchat_url: 'https://ozgroup.hipchat.com'

    route:
      #receiver: 'slack'
      receiver: 'team-X-hipchat'
      group_by: [label_k8s_app]
      group_wait: 1m
      group_interval: 5m 
      routes:
      # All alerts with service=mysql or service=cassandra
      # are dispatched to the database pager.
      - receiver: 'team-X-hipchat'
      # How long to initially wait to send a notification for a group
      # of alerts. Allows to wait for an inhibiting alert to arrive or collect
      # more initial alerts for the same group. (Usually ~0s to few minutes.)
        group_wait: 10s
      # How long to wait before sending a notification about new alerts that
      # are added to a group of alerts for which an initial notification has
      # already been sent. (Usually ~5min or more.)
        group_interval: 10m
      # How long to wait before sending a notification again if it has already
      # been sent successfully for an alert. (Usually ~3h or more).
        repeat_interval: 10h
      # Whether an alert should continue matching subsequent sibling nodes.
        continue: true
        match_re:
          service: mysql|cassandra
      # All alerts with the team=frontend label match this sub-route.
      # They are grouped by product and environment rather than cluster
      # and alertname.
      - receiver: 'team-X-hipchat'
        group_by: [product, environment]
        match:
          team: frontend
    # # Inhibition rules allow to mute a set of alerts given that another alert is
    # # firing.
    # # We use this to mute any warning-level notifications if the same alert is
    # # already critical.
    inhibit_rules:
      - source_match:
          severity: 'critical'
        target_match:
          severity: 'warning'
        # Apply inhibition if the alertname is the same.
        equal: ['alertname', 'service']
    receivers:
    #    - name: 'slack'
    #      slack_configs:
    #          - send_resolved: true
    #            username: '<username>'
    #            channel: '#<channel-name>'
    #            api_url: '<incomming-webhook-url>'
     - name: 'team-X-hipchat'
       hipchat_configs:
        - auth_token: 'NVjhsFzQOxFexUgULAB6Mn6FFP7TcgnFAZUrHwrp'
          room_id: 3969483
          message_format: html
          notify: true
          send_resolved: true
          #from: '{{ template "hipchat.default.message" . }}'
          # message: "{{ range .Alerts }}{{ .Annotations.description }}\n{{ end }}"
          ##Whether this message should trigger a user notification.
          notify: false
          color: '{{ if eq .Status "firing" }}red{{ else }}green{{ end }}'
kind: ConfigMap
metadata:
  name: alertmanager
  namespace: default
